-------------------------------------------------------------
-- Rauchmelder LV2

-- Autoren LV2 Jonathan
-------------------------------------------------------------

NO_S = 3
SPEICHER = 1

SENSOR_IDS = { 0..NO_S-1 }

channel alert, ack
channel smoke, no_smoke : {0 .. NO_S-1}
channel reset
channel reset_sensors
channel smoke_detected, smoke_detected_out, smoke_detected_in : SENSOR_IDS.{up, down}.SENSOR_IDS
channel sensor_smoke, sensor_normal
channel smoke_alert : SENSOR_IDS
channel smoke_ack, smoke_ack_out, smoke_ack_in : {0 .. NO_S-1}
channel s_up, s_down, s_ack : {0 .. NO_S-1}.{0 .. NO_S-1}
channel up, down


--- FIRE(0) ||| FIRE(1)
-- Umgebungsprozesse
---

ENVIRONMENT_CHANNEL = {|smoke, no_smoke, alert, ack|}

FIRES =  ||| id: SENSOR_IDS @ FIRE(id)

FIRE(id) = 
		(smoke!id -> FIRE(id))
        --|~|
        --(no_smoke!id -> FIRE(id))

MANUAL_RESET = reset -> SKIP

FIRE_DEPARTMENT = alert -> ack -> FIRE_DEPARTMENT

---
-- LV2 Prozesse
---

SENSORS = 	SENSOR0(0, sensor_normal) 	[[
										smoke_detected_in.2 <- smoke_detected_out.2,
										smoke_detected_in.1 <- smoke_detected_out.1,
										smoke_ack_in.1 <- smoke_ack_out.1
										]]
			[| {| smoke_ack.1, smoke_detected_in.0.down, smoke_detected_in.0.up, smoke_detected_in.1.up, smoke_detected_in.2.down |} |] 
			(
				SENSOR(1, sensor_normal)	[[
											smoke_detected_in.0 <- smoke_detected_out.0,
											smoke_detected_in.2 <- smoke_detected_out.2,
											smoke_ack_in.2 <- smoke_ack_out.2
											]]
				[| {| smoke_ack_in.2, smoke_detected_in.1.down, smoke_detected_in.2.up |} |] 
				SENSOR(2, sensor_normal)	[[
											smoke_detected_in.0 <- smoke_detected_out.0,
											smoke_detected_in.1 <- smoke_detected_out.1									
											]]
			)

SENSOR0(id, zustand) =

			(zustand == sensor_normal) & ( smoke.id -> smoke_alert.id -> SENSOR(id, sensor_smoke))
			[]
			smoke_detected_in.id?y?x -> smoke_alert.x -> SENSOR(id, zustand)
			[]
			smoke_ack_in.id -> SENSOR(id, sensor_normal)
			--[]
			--(reset -> SENSOR(id, sensor_normal))


SENSOR(id, zustand) =
			
			(zustand == sensor_normal) &  ( smoke.id -> smoke_detected_out!((id+1) % NO_S).up.id -> smoke_detected_out!((id+NO_S-1) % NO_S).down.id -> SENSOR(id, sensor_smoke))
			[]
			smoke_detected_in.id.up?x -> smoke_detected_out!((id+1) % NO_S).up.x -> SENSOR(id, zustand)
        	[]
			smoke_detected_in.id.down?x -> smoke_detected_out!((id+NO_S-1) % NO_S).down.x -> SENSOR(id, zustand)
			[]
			smoke_ack_in.id -> smoke_ack_out!((id+1) % NO_S) -> SENSOR(id, sensor_normal)
			--[]
			--(reset -> SENSOR(id, sensor_normal))

OBSERVER(zustand, ack_) = 
			((zustand == sensor_normal) & smoke_alert?x -> alert -> OBSERVER(smoke_alert.x, ack_))
			[]
			((zustand != sensor_normal) & smoke_alert?x -> OBSERVER(zustand, ack_))
			[]
			(ack -> OBSERVER(zustand, 1))
			[]
			(ack_ > 0) & (smoke_ack_out.1 -> OBSERVER(sensor_normal, 0))


LVL2 = ( FIRES ||| FIRE_DEPARTMENT ) [| ENVIRONMENT_CHANNEL |] ( SENSORS[[smoke_ack.0 <- smoke_ack_out.0 ]] [|{| smoke_ack, smoke_alert |}|] OBSERVER(sensor_normal, 0))

LVL2_H = LVL2 \ {| smoke_detected, s_up, s_down, s_ack |}
---------------------------------------------
-- Assertions und Checks
---------------------------------------------


TEST1 = smoke.1 -> smoke_alert.1 -> alert -> ack -> STOP


TEST2 =  |~| id: SENSOR_IDS @ TEST2_(id)
TEST2_(id) = smoke.id -> smoke_alert.id -> alert -> ack -> STOP

TEST3 = ||| id: SENSOR_IDS @ TEST3_(id)
TEST3_(id) = smoke.id -> TEST3_(id)

assert LVL2_H [T= TEST1
assert LVL2_H [T= TEST2
assert LVL2_H [T= TEST3

assert LVL2 :[deadlock free]
assert SENSORS :[deadlock free]
assert SENSOR(0, sensor_normal) :[deadlock free]
assert SENSOR(1, sensor_normal) :[deadlock free]
