-------------------------------------------------------------
-- Rauchmelder LV0 und LV1
-- LV1 fuehrt redundante Sensoren ein
-- Version 1, SVP WiSe17
-- Basisversion Torge Hinrichs, Bettina Buth
-- Autoren LV1 XXXXXXXXXXXXXXXXXXXXXXXXX
-------------------------------------------------------------

NO_S = 2
SPEICHER = 1

SENSOR_IDS = { 0..NO_S-1 }

channel alert, ack
channel smoke, no_smoke : {0 .. NO_S-1}
channel reset
channel reset_sensors
channel smoke_detected : {0 .. NO_S-1}.{0 .. NO_S-1}
channel sensor_smoke, sensor_normal
channel alert_on, alert_off
channel smoke_alert, smoke_ack : {0 .. NO_S-1}
channel s_up, s_down, s_ack : {0 .. NO_S-1}.{0 .. NO_S-1}


--- FIRE(0) ||| FIRE(1)
-- Umgebungsprozesse
---

ENVIRONMENT_CHANNEL = {|smoke, no_smoke, alert, ack|}

FIRES =  ||| id: SENSOR_IDS @ FIRE(id)

FIRE(id) = 
		(smoke!id -> FIRE(id))
        |~|
        (no_smoke!id -> FIRE(id))

MANUAL_RESET = reset -> SKIP

FIRE_DEPARTMENT = alert -> ack -> FIRE_DEPARTMENT

---
-- LV2 Prozesse
---

SENSORS =  [| {| smoke_ack, smoke_detected|} |] id: SENSOR_IDS @ (SENSOR(id, sensor_normal) [| {| s_up, s_down, s_ack |} |] SENSOR_Sender(id, <>, <>, <>)) \ {| s_up, s_down, s_ack |}

SENSOR(id, zustand) =
					
			((zustand == sensor_normal) & smoke.id -> s_up.id.id -> SENSOR(id, sensor_smoke))
			[]
			((zustand != sensor_normal) & smoke.id -> SENSOR(id, sensor_smoke))
			[]	
			((id == 0) & smoke_detected.id?x -> smoke_alert.x -> SENSOR(id, zustand))
        	[]
			((id != 0) & smoke_detected.id?x -> s_up!id.x -> SENSOR(id, zustand))
			[]
			((id < (NO_S-1)) & smoke_ack.id -> s_ack.id.id -> SENSOR(id, sensor_normal))
			[]
			((id == (NO_S-1)) & smoke_ack.id-> SENSOR(id, sensor_normal))
			[]
			(reset -> SENSOR(id, sensor_normal))

SENSOR_Sender(id, s_up_, s_down_, s_ack_) =

			(#s_up_ < SPEICHER) 	& s_up.id?x -> 		SENSOR_Sender(id, (s_up_^<x>), s_down_, s_ack_)
			[]
			(#s_down_ < SPEICHER) 	& s_down.id?x -> 	SENSOR_Sender(id, s_up_, (s_down_^<x>), s_ack_)
			[]
			(#s_ack_ < SPEICHER)	& s_ack.id?x -> 	SENSOR_Sender(id, s_up_, s_down_, (s_ack_^<x>))
			[]
			(#s_up_ > SPEICHER - 1) 		& s_up.id?x -> 		SENSOR_Sender(id, s_up_, s_down_, s_ack_)
			[]
			(#s_down_ > SPEICHER - 1) 		& s_down.id?x -> 	SENSOR_Sender(id, s_up_, s_down_, s_ack_)
			[]
			(#s_ack_ > SPEICHER - 1)		& s_ack.id?x -> 	SENSOR_Sender(id, s_up_, s_down_, s_ack_)
			[]
			(#s_up_ > 0) 	& smoke_detected!((id+1) % NO_S).head(s_up_) -> 		SENSOR_Sender(id, tail(s_up_), s_down_, s_ack_)
			[]
			(#s_down_ > 0) 	& smoke_detected!((id+NO_S-1) % NO_S).head(s_down_) -> 	SENSOR_Sender(id, s_up_, tail(s_down_), s_ack_)
			[]
			(#s_ack_ > 0) 	& smoke_ack!((id+1) % NO_S) -> 							SENSOR_Sender(id, s_up_, s_down_, tail(s_ack_))

OBSERVER(zustand) = 
			((zustand == sensor_normal) & smoke_alert?x -> alert -> OBSERVER(smoke_alert.x))
			[]
			((zustand != sensor_normal) & smoke_alert?x -> OBSERVER(zustand))
			[]
			(ack -> smoke_ack.0 -> OBSERVER(sensor_normal))


LVL2 = ( FIRES ||| FIRE_DEPARTMENT ) [| ENVIRONMENT_CHANNEL |] ( SENSORS [|{| smoke_ack, smoke_alert |}|] OBSERVER(sensor_normal))

LVL2_H = LVL2 \ {| smoke_detected |}
---------------------------------------------
-- Assertions und Checks
---------------------------------------------


TEST1 = smoke.1 -> smoke_alert.1 -> alert -> ack -> STOP


TEST2 =  |~| id: SENSOR_IDS @ TEST2_(id)
TEST2_(id) = smoke.id -> smoke_alert.id -> alert -> ack -> STOP

TEST3 = ||| id: SENSOR_IDS @ TEST3_(id)
TEST3_(id) = smoke.id -> TEST3_(id)

assert LVL2_H [T= TEST1
assert LVL2_H [T= TEST2
assert LVL2_H [T= TEST3

assert LVL2 :[deadlock free]