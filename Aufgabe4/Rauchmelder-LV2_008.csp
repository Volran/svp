-------------------------------------------------------------
-- Rauchmelder LV2

-- Autoren LV2 Jonathan
-------------------------------------------------------------

NO_S = 3

SENSOR_IDS = { 0..NO_S-1 }

channel alert, ack
channel smoke, no_smoke : {0 .. NO_S-1}
channel reset
channel reset_sensors
channel smoke_detected : SENSOR_IDS.{up, down}.SENSOR_IDS
channel sensor_smoke, sensor_normal
channel smoke_alert : SENSOR_IDS
channel smoke_ack : {0 .. NO_S-1}
channel up, down


--- FIRE(0) ||| FIRE(1)
-- Umgebungsprozesse
---

ENVIRONMENT_CHANNEL = {|smoke, no_smoke, alert, ack|}

FIRES =  ||| id: SENSOR_IDS @ FIRE(id)

FIRE(id) = 
		(smoke!id -> FIRE(id))
        --|~|
        --(no_smoke!id -> FIRE(id))

MANUAL_RESET = reset -> SKIP

FIRE_DEPARTMENT = alert -> ack -> FIRE_DEPARTMENT

---
-- LV2 Prozesse
---

SENSORS = SENSOR0(0, sensor_normal) [| {| smoke_ack.0, smoke_detected.0.down, smoke_detected.0.up |} |]  SENSORS_(1)

SENSORS_(id) = 	if (id < (NO_S-1)) then
					SENSOR(id, sensor_normal) [| {| smoke_ack.(id+1), smoke_detected.id.down, smoke_detected.(id+1).up |} |]  SENSORS_(id+1)
				else
					SENSOR(id, sensor_normal)

SENSORSO = 	SENSOR0(0, sensor_normal)
			[| {| smoke_ack.0, smoke_detected.0.down, smoke_detected.0.up |} |] 
			(
				SENSOR(1, sensor_normal)
				[| {| smoke_ack.2, smoke_detected.1.down, smoke_detected.2.up |} |] 
				SENSOR(2, sensor_normal)
			)


SENSOR0(id, zustand) = ( SENSOR0_(id, zustand) /\ ( 
			
			( (smoke_ack.id -> smoke_ack!((id+1) % NO_S) -> SKIP) ); SENSOR0(id, sensor_normal) )
			[]
			( reset -> SENSOR0(id, sensor_normal) )
			
			)


SENSOR0_(id, zustand) =

			( (zustand == sensor_normal) & ( smoke.id -> smoke_alert.id -> SENSOR0_(id, sensor_smoke)) )
			[]
			( smoke_detected.id?y?x -> smoke_alert.x -> SENSOR0_(id, zustand) )


SENSOR(id, zustand) = SENSOR_(id, zustand) /\ (

			((id < (NO_S - 1)) & ( smoke_ack.id -> smoke_ack!((id+1) % NO_S) -> SKIP)); SENSOR(id, sensor_normal)
			[]
			((id == (NO_S - 1)) & ( smoke_ack.id -> SKIP)); SENSOR(id, sensor_normal)
			[]
			(reset -> SENSOR(id, sensor_normal))

			)


SENSOR_(id, zustand) =
			
			(zustand == sensor_normal) &  ( smoke.id -> smoke_detected!((id+1) % NO_S).up.id -> smoke_detected!((id+NO_S-1) % NO_S).down.id -> SENSOR_(id, sensor_smoke))
			[]
			smoke_detected.id.up?x -> smoke_detected!((id+1) % NO_S).up.x -> SENSOR_(id, zustand)
        	[]
			smoke_detected.id.down?x -> smoke_detected!((id+NO_S-1) % NO_S).down.x -> SENSOR_(id, zustand)


OBSERVER(zustand, ack_) = 

			((zustand == sensor_normal) & smoke_alert?x -> alert -> OBSERVER(smoke_alert.x, ack_))
			[]
			((zustand != sensor_normal) & smoke_alert?x -> OBSERVER(zustand, ack_))
			[]
			(ack -> OBSERVER(zustand, 1))
			[]
			(ack_ > 0) & (smoke_ack.0 -> OBSERVER(sensor_normal, 0))


LVL2 = ( FIRES ||| FIRE_DEPARTMENT ) [| ENVIRONMENT_CHANNEL |] ( SENSORS [|{| smoke_ack.0, smoke_alert |}|] OBSERVER(sensor_normal, 0))

LVL2_H = LVL2 \ {| smoke_detected |}
---------------------------------------------
-- Assertions und Checks
---------------------------------------------


TEST1 = smoke.1 -> smoke_alert.1 -> alert -> ack -> STOP


TEST2 =  |~| id: SENSOR_IDS @ TEST2_(id)
TEST2_(id) = smoke.id -> smoke_alert.id -> alert -> ack -> STOP

TEST3 = ||| id: SENSOR_IDS @ TEST3_(id)
TEST3_(id) = smoke.id -> TEST3_(id)

assert LVL2_H [T= TEST1
assert LVL2_H [T= TEST2
--assert LVL2_H [T= TEST3

assert LVL2 :[deadlock free]
assert SENSORS :[deadlock free]
assert SENSOR(0, sensor_normal) :[deadlock free]
assert SENSOR(1, sensor_normal) :[deadlock free]
